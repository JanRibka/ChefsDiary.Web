import { memo, useMemo } from "react";

import { unstable_composeClasses as composeClasses } from "@mui/material";
import { SvgIconProps } from "@mui/material/SvgIcon";

import { useGridApiContext } from "../../hooks/utils/useGridApiContext";
import { useGridRootProps } from "../../hooks/utils/useGridRootProps";
import { GridColDef } from "../../models/colDef/gridColDef";
import { GridRenderCellParams } from "../../models/params/gridCellParams";
import { DataGridProcessedProps } from "../../models/props/gridProps";

type OwnerState = { classes: DataGridProcessedProps["classes"] };

const useUtilityClasses = (ownerState: OwnerState) => {
  const { classes } = ownerState;

  const slots = {
    root: ["booleanCell"],
  };

  return composeClasses(slots, getDataGridUtilityClass, classes);
};

interface GridBooleanCellProps
  extends GridRenderCellParams,
    Omit<SvgIconProps, "tabIndex" | "id"> {}

const GridBooleanCellRaw = (props: GridBooleanCellProps) => {
  const {
    id,
    value,
    formattedValue,
    api,
    field,
    row,
    rowNode,
    colDef,
    cellMode,
    isEditable,
    hasFocus,
    tabIndex,
    getValue,
    ...other
  } = props;

  const apiRef = useGridApiContext();
  const rootProps = useGridRootProps();
  const ownerState = { classes: rootProps.classes };
  const classes = useUtilityClasses(ownerState);

  const Icon = useMemo(
    () =>
      value
        ? rootProps.components.BooleanCellTrueIcon
        : rootProps.components.BooleanCellFalseIcon,
    [
      rootProps.components.BooleanCellFalseIcon,
      rootProps.components.BooleanCellTrueIcon,
      value,
    ]
  );

  return (
    <Icon
      fontSize="small"
      className={classes.root}
      titleAccess={apiRef.current.getLocaleText(
        value ? "booleanCellTrueLabel" : "booleanCellFalseLabel"
      )}
      data-value={Boolean(value)}
      {...other}
    />
  );
};

const GridBooleanCell = memo(GridBooleanCellRaw);

export { GridBooleanCell };

export const renderBooleanCell: GridColDef["renderCell"] = (
  params: GridBooleanCellProps
) => {
  if (params.rowNode.isAutoGenerated) {
    return "";
  }

  return <GridBooleanCell {...params} />;
};
